plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    runs {
        client {
            programArgs "-mixin.config=ultreonlib-common.mixins.json"
            programArgs "-mixin.config=advanced-debug-common.mixins.json"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modApi "com.ultreon.mods:ultreon-lib-forge:1.1.0"
    modApi 'com.github.Ultreon.advanced-debug:advanced-debug-forge:9b626785f7'

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
    finalizedBy "obfJar"
}

jar {
    classifier "dev"
}

tasks.register('obfJar', Jar) {
    dependsOn remapJar
    classifier "obf"

    doLast {
        FileOutputStream output = new FileOutputStream(outputs.files.singleFile)
        output.write(new byte[]{0x50, 0x4B, 0x03, 0x04})
        output.flush()
        FileInputStream input = new FileInputStream("$projectDir/build/libs/${archiveBaseName.get()}-${version}.jar")
        def inJar = input.readAllBytes()
        output.write(inJar)
        output.flush()
        output.close()
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}