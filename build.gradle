plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id "io.github.pacifistmc.forgix" version "1.2.6"
}

architectury {
    minecraft = rootProject.minecraft_version
}

forgix {
    group = "dev.ultreon"
    // This is the common group of the mod which by default in Architectury Template it's defined as "maven_group" in your gradle.properties. If this property is not defined then by default it'll fetch the group from the maven_group property in your gradle.properties
    mergedJarName = "ERROR422.jar"
    // This is the name of the merged jar. If this property is not defined then by default it'll fetch the "archives_base_name" property with the "mod_version" property in your gradle.properties.
    outputDir = "build/libs/merged"
    // This is the output directory of the merged jar from the root project. If this property is not defined then by default it's set to "Merged".

    forge {
        projectName = "forge"
        // This is the name of the forge project. If this property is not defined then by default it'll set to "forge" since that's the name the Architectury Template uses.
        jarLocation = "build/libs/ERROR422-${mod_version}.jar"
        // This is the location of the forge jar from the forge project. If this property is not defined then by default it fetches the jar with the shortest name.

        mixin "error422.mixins.json" // This is in case if we didn't auto detect the forge mixins.
        mixin "error422-common.mixins.json"
    }

    fabric {
        projectName = "fabric"
        // This is the name of the fabric project. If this property is not defined then by default it'll set to "fabric" since that's the name the Architectury Template uses.
        jarLocation = "build/libs/ERROR422-${mod_version}.jar"
        // This is the location of the fabric jar from the fabric project. If this property is not defined then by default it fetches the jar with the shortest name.
    }
}

mergeJars.dependsOn(":fabric:build")
mergeJars.dependsOn(":forge:build")

tasks.register("buildAll") {
    group = "build"

    dependsOn(":fabric:build")
    dependsOn(":forge:build")
    dependsOn(mergeJars)
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven {
            name "Jitpack"
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }

        maven {
            name "Jitpack"
            url "https://jitpack.io"
        }

        flatDir {
            dir "$projectDir/libs"
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:@YARN_MAPPINGS@:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
